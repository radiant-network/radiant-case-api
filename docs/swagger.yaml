components:
  schemas:
    BatchError:
      properties:
        code:
          type: string
        error:
          type: string
        field:
          type: string
      required:
      - error
      type: object
    BatchErrorResponse:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/BatchError'
          type: array
          uniqueItems: false
        id:
          type: string
        status_code:
          type: string
      required:
      - status_code
      type: object
    BatchResponse:
      properties:
        id:
          type: string
        status_code:
          type: string
      required:
      - status_code
      type: object
    Case:
      properties:
        diagnostic_lab_code:
          example: DGL123
          type: string
        panel_code:
          example: BREAST_CANCER_PANEL
          type: string
        patients:
          items:
            $ref: '#/components/schemas/CasePatient'
          type: array
          uniqueItems: false
        primary_condition_mondo_code:
          example: MONDO:0001234
          type: string
        project_code:
          example: CBTN
          type: string
        request_priority_code:
          enum:
          - routine
          - urgent
          - asap
          - stat
          example: routine
          type: string
        sequencing_experiments:
          items:
            $ref: '#/components/schemas/CaseSequencingExperiment'
          type: array
          uniqueItems: false
        status_code:
          enum:
          - draft
          - in_progress
          - revoke
          - completed
          - incomplete
          - submitted
          - unknown
          example: in_progress
          type: string
        type:
          enum:
          - germline
          - somatic
          example: germline
          type: string
      required:
      - project_code
      - type
      type: object
    CaseDocument:
      properties:
        data_category_code:
          enum:
          - clinical
          - genomic
          example: genomic
          type: string
        data_type_code:
          enum:
          - alignment
          - snv
          - ssnv
          - gcnv
          - scnv
          - gsv
          - ssv
          - somfu
          - ssup
          - igv
          - cnvvis
          - exp
          - covgene
          - qcrun
          - exomiser
          - jointsnv
          example: alignment
          type: string
        format_code:
          enum:
          - cram
          - crai
          - gvcf
          - vcf
          - tbi
          - tgz
          - json
          - html
          - tsv
          - bw
          - bed
          - png
          - csv
          - pdf
          - txt
          example: cram
          type: string
        hash:
          example: 9e107d9d372bb6826bd81d3542a419d6
          type: string
        name:
          example: FILE000.cram
          type: string
        size:
          example: 123456
          type: integer
        url:
          example: s3://bucket/prefix/FILE000.cram
          type: string
      required:
      - data_category_code
      - data_type_code
      - format_code
      - hash
      - name
      - size
      - url
      type: object
    CaseErrorResponse:
      properties:
        error:
          type: string
        id:
          type: string
      required:
      - error
      type: object
    CaseFamilyHistory:
      properties:
        condition:
          example: breast cancer
          type: string
        family_member_code:
          enum:
          - father
          - mother
          - sibling
          - grandparent
          - uncle_aunt
          - cousin
          - child
          example: grandparent
          type: string
      required:
      - condition
      - family_member_code
      type: object
    CaseObservationCategorical:
      properties:
        code_system:
          example: hpo
          type: string
        code_value:
          example: HPO:0004322
          type: string
        interpretation_code:
          enum:
          - positive
          - negative
          example: positive
          type: string
        note:
          example: note
          type: string
        onset_code:
          enum:
          - unknown
          - antenatal
          - congenital
          - neonatal
          - infantile
          - childhood
          - juvenile
          - young_adult
          - middle_age
          - senior
          example: childhood
          type: string
        type:
          enum:
          - phenotype
          - condition
          - ancestry
          - consanguinity
          example: phenotype
          type: string
      required:
      - code_system
      - code_value
      - type
      type: object
    CaseObservationText:
      properties:
        type:
          enum:
          - note
          type: string
        value:
          type: string
      required:
      - type
      - value
      type: object
    CasePatient:
      properties:
        affected_status_code:
          enum:
          - affected
          - not_affected
          - unknown
          example: affected
          type: string
        family_history:
          items:
            $ref: '#/components/schemas/CaseFamilyHistory'
          type: array
          uniqueItems: false
        observations_categorical:
          items:
            $ref: '#/components/schemas/CaseObservationCategorical'
          type: array
          uniqueItems: false
        observations_text:
          items:
            $ref: '#/components/schemas/CaseObservationText'
          type: array
          uniqueItems: false
        organization_code:
          example: CHOP
          type: string
        organization_patient_id:
          example: PA000123
          type: string
        relation_to_proband_code:
          enum:
          - proband
          - mother
          - father
          - brother
          - sister
          - unknown
          example: proband
          type: string
      required:
      - affected_status_code
      - organization_code
      - organization_patient_id
      - relation_to_proband_code
      type: object
    CaseSequencingExperiment:
      properties:
        aliquot:
          example: ALQ000123
          type: string
        capture_kit:
          example: KAPA
          type: string
        experiment_code:
          type: string
        is_paired_end:
          example: true
          type: boolean
        performer_lab_code:
          example: LAB000123
          type: string
        read_length:
          example: 100
          type: integer
        request_priority_code:
          enum:
          - routine
          - urgent
          - asap
          - stat
          example: routine
          type: string
        run_alias:
          example: run_123
          type: string
        run_date:
          example: "2020-09-19T14:00:00Z"
          format: date-time
          type: string
        run_name:
          example: Run 123
          type: string
        sample_organization_code:
          example: CHOP
          type: string
        status_code:
          enum:
          - draft
          - in_progress
          - revoke
          - completed
          - incomplete
          - submitted
          - unknown
          example: completed
          type: string
        submitter_sample_id:
          example: SA000123
          type: string
        task:
          $ref: '#/components/schemas/CaseTask'
      required:
      - aliquot
      - experiment_code
      - sample_organization_code
      - submitter_sample_id
      - task
      type: object
    CaseSuccessResponse:
      properties:
        id:
          type: string
      type: object
    CaseTask:
      properties:
        documents:
          items:
            $ref: '#/components/schemas/CaseDocument'
          type: array
          uniqueItems: false
        pipeline_code:
          type: string
        type:
          enum:
          - nga
          - toga
          - tnga
          - nea
          - toea
          - tnea
          - npa
          - topa
          - tnpa
          - tofpa
          - tra
          type: string
      required:
      - pipeline_code
      - type
      type: object
    ListCases:
      properties:
        cases:
          items:
            $ref: '#/components/schemas/Case'
          type: array
          uniqueItems: false
      required:
      - cases
      type: object
    ListPatients:
      properties:
        patients:
          items:
            $ref: '#/components/schemas/Patient'
          type: array
          uniqueItems: false
      required:
      - patients
      type: object
    ListSamples:
      properties:
        samples:
          items:
            $ref: '#/components/schemas/Sample'
          type: array
          uniqueItems: false
      required:
      - samples
      type: object
    PartialCase:
      properties:
        diagnostic_lab_code:
          example: DGL123
          type: string
        panel_code:
          example: BREAST_CANCER_PANEL
          type: string
        patients:
          items:
            $ref: '#/components/schemas/CasePatient'
          type: array
          uniqueItems: false
        primary_condition_mondo_code:
          type: string
        sequencing_experiments:
          items:
            $ref: '#/components/schemas/CaseSequencingExperiment'
          type: array
          uniqueItems: false
        status_code:
          enum:
          - draft
          - in_progress
          - revoke
          - completed
          - incomplete
          - submitted
          - unknown
          example: completed
          type: string
      type: object
    Patient:
      properties:
        is_alive:
          example: true
          type: boolean
        organization_code:
          example: CHOP
          type: string
        organization_patient_id:
          example: PA000123
          type: string
        organization_type_code:
          example: mrn
          type: string
      required:
      - organization_code
      - organization_patient_id
      - organization_type_code
      type: object
    Sample:
      properties:
        histology:
          enum:
          - normal
          - tumoral
          example: normal
          type: string
        organization_code:
          example: CHOP
          type: string
        organization_patient_id:
          example: PA000123
          type: string
        parent_submitter_sample_id:
          example: SA000122
          type: string
        sample_type:
          enum:
          - dna
          - rna
          - blood
          - solid_tissue
          example: blood
          type: string
        submitter_sample_id:
          example: SA000123
          type: string
        tissue_site:
          example: plasma
          type: string
      required:
      - organization_code
      - organization_patient_id
      - sample_type
      - submitter_sample_id
      type: object
  securitySchemes:
    bearerauth:
      bearerFormat: JWT
      scheme: bearer
      type: http
externalDocs:
  description: ""
  url: ""
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: Mock API for case creation and updates (OpenAPI 3.1 intent)
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://example.com/terms/
  title: Radiant Case API
  version: 0.1.0
openapi: 3.1.0
paths:
  /cases:
    post:
      description: Create a single case
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Case'
        description: Case
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseSuccessResponse'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseErrorResponse'
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - bearerauth: []
      summary: Create a case
      tags:
      - Cases
  /cases/{id}:
    patch:
      description: Update a case partial fields by id
      parameters:
      - description: case id
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PartialCase'
        description: partial fields
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseSuccessResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseErrorResponse'
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - bearerauth: []
      summary: Update partially one case
      tags:
      - Cases
  /cases/batch:
    post:
      description: Accepts a JSON array of Case
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListCases'
        description: List Cases
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchErrorResponse'
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - bearerauth: []
      summary: Create a batch of cases
      tags:
      - Cases
  /cases/batch/{id}:
    get:
      description: Get the current status of a batch job by ID
      parameters:
      - description: batch id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchErrorResponse'
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - bearerauth: []
      summary: Get status of a batch of cases
      tags:
      - Cases
  /patients/batch:
    post:
      description: Accepts a JSON array of Patients
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListPatients'
        description: List Patients
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchErrorResponse'
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - bearerauth: []
      summary: Create a batch of patients
      tags:
      - Patients
  /patients/batch/{id}:
    get:
      description: Get the current status of a batch job by ID
      parameters:
      - description: batch id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchErrorResponse'
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - bearerauth: []
      summary: Get status of a batch of patients
      tags:
      - Patients
  /samples/batch:
    post:
      description: Accepts a JSON array of Samples
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListSamples'
        description: List Samples
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
          description: Accepted
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchErrorResponse'
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - bearerauth: []
      summary: Create a batch of samples
      tags:
      - Samples
  /samples/batch/{id}:
    get:
      description: Get the current status of a batch job by ID
      parameters:
      - description: batch id
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchResponse'
          description: Created
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchErrorResponse'
          description: Bad Request
        "401":
          description: Unauthorized
      security:
      - bearerauth: []
      summary: Get status of a batch of samples
      tags:
      - Samples
servers:
- url: http://localhost:8080/
